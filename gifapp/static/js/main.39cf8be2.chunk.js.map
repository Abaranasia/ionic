{"version":3,"sources":["components/AddCati.js","components/GifGridItem.js","components/GetGifs.js","components/GifGrid.js","components/hooks/useFetchGifs.js","components/Header.js","GifApp.js","index.js"],"names":["AddCati","setcategorias","useState","inputVal","setInputVal","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","GifGridItem","title","url","className","href","rel","src","alt","getGifs","categoria","a","encodeURI","fetch","resp","json","data","fotos","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","image","Header","GifApp","categorias","cati","ReactDOM","render","document","getElementById"],"mappings":"qLAIe,SAASA,EAAT,GAAoC,IAAjBC,EAAgB,EAAhBA,cAE9B,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KAgBA,OACI,uBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAASK,OAAOC,OAAO,IACvBR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAiBO,OACnCN,EAAY,MAMhB,UACI,uBACAO,KAAK,OACLC,YAAY,qBACZC,MAAQV,EACRW,SApBY,SAACR,GACjBF,EAAYE,EAAES,OAAOF,UAqBpB,wBAAQF,KAAK,SAAb,0B,YC5BM,SAASK,EAAT,GAAoC,IAAdC,EAAa,EAAbA,MAAOC,EAAM,EAANA,IAOxC,OACI,yBAASC,UAAU,OAAnB,UACI,mBAAGC,KAAMF,EAAKH,OAAO,SAASM,IAAI,aAAlC,SACI,qBAAKC,IAAMJ,EAAKK,IAAMN,MAE1B,qCAAaA,O,2BCZXO,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAWdR,EAXc,iDAWkCS,UAAUF,GAX5C,+DAYDG,MAAOV,GAZN,cAYdW,EAZc,gBAaGA,EAAKC,OAbR,uBAaZC,EAbY,EAaZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRlB,MAAOiB,EAAIjB,MACXC,IAAKgB,EAAIE,OAAOC,iBAAiBnB,QAnBrB,kBAuBbc,GAvBa,4CAAH,sDCEN,SAASM,EAAT,GAA+B,IAAbb,EAAY,EAAZA,UAS9B,ECVY,SAAsBA,GAUjC,MAA0BvB,mBAAS,CAC/B6B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZIC,qBAAU,WACNlB,EAAQC,GACPkB,MAAK,SAAAX,GACFS,EAAS,CACLV,KAAMC,EACNO,SAAS,SAIlB,CAACd,IAGDe,EDjBuBI,CAAanB,GAAhCW,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QAGnB,OACI,qCACI,6BAAKd,IAEJc,GAAW,2CAEZ,qBAAKpB,UAAU,mDAAf,SACKiB,EAAOH,KAAI,SAAAY,GAAK,OACf,cAAC7B,EAAD,eAAgC6B,GAAdA,EAAMV,YEtB3B,SAASW,IACpB,OACI,iCACI,gECCL,IAAMC,EAAS,WAIlB,MAAoC7C,mBAAS,CAAC,SAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAQA,OACI,gCACI,cAAC6C,EAAD,IACA,iCACI,cAAC9C,EAAD,CAASC,cAAgBA,IAEzB,6BACI+C,EAAWf,KAAK,SAAAgB,GAAI,OAEpB,aADA,CACCX,EAAD,CAEQb,UAAWwB,GADNA,eClBjCC,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.39cf8be2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default function AddCati( {setcategorias}) {\n\n    const [inputVal, setInputVal] = useState('')\n\n    const inputChange = (e) => {\n        setInputVal(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if (inputVal.trim().length>2) {\n            setcategorias(cats =>[inputVal, ...cats]); // EL orden importa\n            setInputVal('')\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n            type=\"text\"\n            placeholder=\"nueva categoría\"\n            value= {inputVal}\n            onChange={inputChange}\n            />\n         <button type=\"submit\">Añadir</button>   \n        </form>\n    )\n}\n\nAddCati.propTypes = {\n    setcategorias: PropTypes.func.isRequired\n}","import React from 'react'\r\n\r\nexport default function GifGridItem({title, url}) {\r\n/*** \r\n * \r\n * Componente que imprime en pantalla cada imagen recibida desde GifGrid\r\n *  \r\n * ***/ \r\n\r\n    return (\r\n        <figure  className=\"foto\">\r\n            <a href={url} target=\"_blank\" rel=\"noreferrer\">\r\n                <img src= {url} alt= {title}/>\r\n            </a>\r\n            <figcaption>{title}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n","\r\n\r\nexport const  getGifs = async (categoria) => {\r\n/*** \r\n * \r\n * Componente que descarga desde la API las imágenes correspondientes a una categoría \r\n * Devuelve un objeto con id, title y url\r\n *  \r\n * ***/ \r\n\r\n    //api: 6jmEyv2X055hHRTsamg2tMc8NgyIywE8\r\n    // https://developers.giphy.com/docs/api/endpoint/#search\r\n\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit=12&api_key=6jmEyv2X055hHRTsamg2tMc8NgyIywE8`;\r\n    const resp = await fetch (url);\r\n    const { data } = await resp.json();\r\n    \r\n    const fotos= data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return fotos;\r\n}","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport useFetchGifs from './hooks/useFetchGifs';\r\n\r\nexport default function GifGrid({categoria}) {\r\n/*** \r\n * \r\n * Componente que obtiene las imágenes de una categoría llamando a useFetchGifs \r\n * y las presenta en la capa .resultados empleando el componente GifGridItem\r\n *  \r\n * ***/ \r\n\r\n\r\n   const {data:images, loading} = useFetchGifs(categoria);\r\n   // Renombramos data a images para facilitar la lectura del código\r\n\r\n    return (\r\n        <>\r\n            <h2>{categoria}</h2>\r\n            \r\n            {loading && <p>Loading...</p>}\r\n\r\n            <div className=\"resultados animate__animated animate__backInDown\">\r\n               { images.map(image => (\r\n                  <GifGridItem key={image.id} {...image}/>\r\n               ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport { getGifs } from '../GetGifs';\r\n\r\nexport default function useFetchGifs(categoria) {\r\n/*** \r\n * \r\n * Hook que gestiona la descarga de nuevas imágenes de una categoría desde la api con getGifs\r\n * Emplea un estado con las imágenes y un booleano para mensaje de \"loading..\"\r\n * Actualiza el mensaje \"loading..\" a false cuando se han recibido las imágenes desde getGifs\r\n * Devuelve el estado con las fotos y \"loading..\"\r\n *  \r\n * ***/ \r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n        });\r\n\r\n        useEffect(() => {\r\n            getGifs(categoria)\r\n            .then(fotos => {\r\n                setState({\r\n                    data: fotos,\r\n                    loading: false\r\n                })\r\n            });\r\n            \r\n        }, [categoria]) // dato dependiente; useEffect se ejecuta de nuevo si este valor cambia \r\n\r\n        \r\n    return state \r\n}\r\n","import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header>\r\n            <h1>GifApp - a Giphy search tool</h1>\r\n        </header>\r\n            \r\n\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport AddCati from './components/AddCati';\n//import CovidInfo from './components/CovidInfo';\nimport GifGrid from './components/GifGrid';\nimport Header from './components/Header';\n\nexport const GifApp = () => {\n\n    //const categorias = ['tea', 'cat', 'dance']\n\n    const [categorias, setcategorias] = useState(['cats']);\n\n    /*\n    const addCati = () => {\n        setcategorias([...categorias, 'nueva']);\n    }\n    */\n   \n    return (\n        <div>\n            <Header/>\n            <main>\n                <AddCati setcategorias= {setcategorias}/>\n\n                <ol>{\n                    categorias.map (cati => (\n                    // (<li key={cati}>{cati}</li>)\n                    <GifGrid \n                            key={cati} \n                            categoria={cati} \n                    />\n                    ))\n                }\n                </ol>\n            </main> \n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { GifApp } from './GifApp';\n//import CovidInfo from './components/CovidInfo';\n\n//api: 6jmEyv2X055hHRTsamg2tMc8NgyIywE8\n// https://developers.giphy.com/docs/api/endpoint/#search\n\nReactDOM.render(\n  //<CovidInfo />,\n  <GifApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}